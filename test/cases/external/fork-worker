// This file intentional does not have an extension
// to prevent the Mocha grep from picking it up.

let ESM_MODULES = {
    'fs': `
        function readFileSync() {}; 
        export default { readFileSync }
    `,
    'DefaultModule': `
        export default { prop: true };
    `,
    'NamedModule': `
        export var NamedExport1 = 123;
        export var NamedExport2 = 456;
    `,
    'BareModule': `
        self.BareModule = { prop: true };
    `
};

let CJS_MODULES = {
    'DefaultModule': `
        module.exports.default = { prop: true }
    `,
    'NamedModule': `
        module.exports.NamedExport1 = 123;
        module.exports.NamedExport2 = 456;
    `,
    'BareModule': `
        self.BareModule = { prop: true };
    `,
    'DefaultFallbackModule': `
        module.exports = { prop: true };
    `
};

let IIFE_MODULES = {
    'fs': {
        readFileSync: true
    },
    'DefaultModule': {
        default: { 
            prop: true
        }
    },
    'NamedModule': {
        NamedExport1: 123,
        NamedExport2: 456
    },
    'BareModule': {
        prop: true
    },
    'DefaultFallbackModule': {
        prop: true
    },
    '_IIFE_Special_Characters_': {
        NamedExport1: 123,
        NamedExport2: 456
    },
    '__globalModule': {
        NamedExport1: 123,
        NamedExport2: 456
    }
};

function findModule (specifier, modules, chunks) {
    let code;

    if (modules[specifier]) {
        code = modules[specifier];
    } else {
        if (specifier.indexOf('./') === 0) {
            specifier = specifier.slice(2);
        }
        
        let chunk = chunks.find(c => c.fileName === specifier);
        if (chunk) {
            code = chunk.code;
        }
    }

    return code;
}

async function enterESM (specifier, context, chunks) {
    let code = findModule(specifier, ESM_MODULES, chunks);
    let script = new vm.SourceTextModule(code, {
        context,
        importModuleDynamically: spec => enterESM(spec, context, chunks)
    });

    if (script.status === 'unlinked') {
        await script.link(spec => enterESM(spec, context, chunks));
    }

    if (script.status === 'linked') {
        await script.evaluate();
    }

    return script;
}

async function enterCJS (specifier, context, chunks) {
    let nodeRequire = require;
    let wrappedRequire = specifier => {
        let mod = findModule(specifier, CJS_MODULES, chunks);
        if (mod) {
            return eval(`
                let module = { exports: {} };
                let require = wrappedRequire;
                let self = context.self;
                ${mod}
                module.exports;
            `); 
        }

        return nodeRequire(specifier);
    };
            
    wrappedRequire(specifier);
}

let vm = require('vm');
process.on('message', async (msg) => {
    if (msg.entry) {
        if (msg.format === 'esm') {
            let contextObj = { self: {} };
            let context = vm.createContext(contextObj);
            await enterESM(msg.entry, context, msg.chunks);

            if (msg.async) {
                setTimeout(() => {
                    process.send({ result: contextObj.self.result });
                }, 1000)
            } else {
                process.send({ result: contextObj.self.result });
            }
            
        }

        if (msg.format === 'cjs') {
            let contextObj = { self: {} }; 
            await enterCJS(msg.entry, contextObj, msg.chunks);
            if (msg.async) {
                setTimeout(() => {
                    process.send({ result: contextObj.self.result });
                }, 1000)
            } else {
                process.send({ result: contextObj.self.result });
            }
            
        }

        if (msg.format === 'iife') {
            let contextObj = { self: { 
                ...IIFE_MODULES
            }}; 
            let context = vm.createContext(contextObj);
            let script = new vm.Script(msg.chunks[0].code, { context });
            script.runInContext(context);
            process.send({ result: contextObj.self.result });
        }
    }    
});

process.send({ ready: true });